This project is being created for Healthcare Information Systems
Security Course at Capitol Technology University. The project will
contain a env file containing environment variables, a read me with
project description and execution instrutions, and a .py file to execute.
The project will take a sample xlsx containing person healthcare information (fake)
and implement three confidentiality and three integrity controls.

For confidentiality, I will anonymize the data in the sample file, encrypt
it using pycrypto, and contain the salt and passphrase for encryption within
an environment file. This will make it difficult to sniff the data through network
traffic. The anonimization of data will also make it useless to individuals who are
attempting to steal personal identifiable information. Containing the salt and
passwords for encryption in an environment file is a software development
best practice to prevent leaving sensitive information in plaintext for potential
attackers.

To maintain integrity, I have used a version controller (GitHub) to manage who
has access to read and modify the data/code within this project. Two-factor
authentication will also be used in combination with Google Authenticator to
ensure only authorized individuals can execute the program. The last integrity
control will be input validation. When entering your code for TFA, I will ensure
that users can only enter a code of proper length and type. This will prevent
buffer overflow attacks from taking place. I may also implement a function to ask
users for a specified file path where they would like the decrypted file to be sent.
If this is implemented, input validation will also take place on that variable.

Program Instructions

This Python Program has been created in GitHub for ease of access. All files
needed to run the program can be downloaded along with the code from this
GitHub link:https://github.com/DustinCooper2000/IAE-690/tree/master. Once you
have all the files on your local or virtual machine, run the "TFA.py" file.
This will require you to download the "Google Authentication" app from your
mobile app store. When you run the "TFA.py" file, it will ask for a user account
name. Your user as the instructor is Momar. Captilization is important. You will
have three attempts to login before the code exits with an error message. Attempts
to input too many characters (6) will result in a failed login attempt. Upon
successfully entering the user account name, a PNG file called totp_qr.png will
be created within the same file as the python script. Open the PNG and scan the QR
code using the Google Authenticator app. This will provide you with an authentication
code that is needed to run the "Read Data.py" file. Notice that the code changes
every 30 seconds. Please wait for the code to refresh before attempting to
authenticate. This authentication protects the data from being read by anyone
without the proper user account and authentication code. Upon successful authentication
an excel file will be written to this project folder called "Decrypted_File.xlsx".
This excel file contains the contents we began with.